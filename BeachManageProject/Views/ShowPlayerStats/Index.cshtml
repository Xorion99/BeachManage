@model BeachManage.ViewModel.PlayerStatsViewModel

@{
    ViewData["Title"] = "Statistiche Giocatore";
}

<div class="container mt-5">
    <h2 class="text-center text-primary">📊 Statistiche Giocatore</h2>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow-lg p-4">
                <h3 class="text-center text-info mb-4">Statistiche Dettagliate</h3>

                <table class="table table-striped table-bordered table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Statistica</th>
                            <th>Valore Totale</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var statType in Model.Stats)
                        {
                            // Sommiamo tutti i valori per quel tipo di statistica
                            var totalStatValue = Model.PlayerStats
                                .Where(ps => ps.StatTypeId == statType.Id)  // Filtra solo le statistiche per questo tipo
                                .Sum(ps => ps.StatValue);  // Somma i valori di StatValue per ogni partita

                            // Se non ci sono statistiche per quel tipo, mettiamo 0
                            totalStatValue = totalStatValue > 0 ? totalStatValue : 0;

                            <tr class="animated fadeIn">
                                <td>@statType.Description</td>
                                <td>@totalStatValue</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>


    <div class="container mt-5">
        <h2 class="text-center text-primary">📊 Statistiche Giocatore</h2>

        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow-lg p-4">
                    <h3 class="text-center text-info mb-4">Statistiche Dettagliate</h3>
                    <canvas id="statsChart"></canvas>
                    <div class="legend mt-3 text-center">
                        @foreach (var statType in Model.Stats)
                        {
                            <span class="legend-item" style="color: @GetColor(statType.Id)">
                                <span class="legend-box" style="background-color: @GetColor(statType.Id)"></span>
                                @statType.Description
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var ctx = document.getElementById('statsChart').getContext('2d');
            var statsData = @Html.Raw(Json.Serialize(Model.Stats.Select(statType => new
            {
                label = statType.Description,
                value = Model.PlayerStats.Where(ps => ps.StatTypeId == statType.Id).Sum(ps => ps.StatValue),
                color = GetColor(statType.Id)
            })));

            var chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: statsData.map(s => s.label),
                    datasets: [{
                        label: 'Statistiche',
                        data: statsData.map(s => s.value),
                        backgroundColor: statsData.map(s => s.color),
                        borderColor: '#333',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });
    </script>

</div>

<!-- Aggiungi uno stile personalizzato per il design -->
<style>
    .container {
        background-color: #f8f9fa;
        border-radius: 10px;
    }

    .card {
        background-color: #ffffff;
        border-radius: 10px;
    }

    .thead-dark {
        background-color: #007bff;
        color: white;
    }

    table {
        font-size: 1.1em;
        text-align: center;
    }

    .table th, .table td {
        padding: 12px;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f1f1f1;
    }

    .table-hover tbody tr:hover {
        background-color: #e9ecef;
    }

    .animated {
        animation: fadeIn 1s ease-in;
    }

    /* Animazione Fade-in */
    keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    .container {
        background-color: #f8f9fa;
        border-radius: 10px;
    }

    .card {
        background-color: #ffffff;
        border-radius: 10px;
    }

    .legend {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 10px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        font-weight: bold;
        font-size: 1.1em;
    }

    .legend-box {
        width: 20px;
        height: 20px;
        margin-right: 8px;
        border-radius: 3px;
    }

    #statsChart {
    width: 100% !important; /* Fa sì che il grafico occupi tutta la larghezza disponibile */
    height: 300px !important; /* Imposta un'altezza fissa per il grafico */
    max-width: 800px; /* Limita la larghezza massima */
    margin: 0 auto; /* Centra il grafico orizzontalmente */
}

/* Aggiungi una regola per ridurre l'altezza su schermi più piccoli */
media (max-width: 768px) {
    #statsChart {
        height: 200px !important; /* Riduce l'altezza sui dispositivi mobili */
    }
}
</style>

@functions {
    public string GetColor(int statTypeId)
    {
        return statTypeId switch
        {
            1 => "#28a745", // Verde
            2 => "#007bff", // Blu
            3 => "#dc3545", // Rosso
            4 => "#ffc107", // Giallo
            5 => "#6f42c1", // Viola
            _ => "#000000" // Nero di default
        };
    }
}
